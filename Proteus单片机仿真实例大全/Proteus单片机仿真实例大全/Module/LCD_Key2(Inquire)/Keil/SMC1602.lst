C51 COMPILER V8.05a   SMC1602                                                              08/11/2007 12:25:47 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE SMC1602
OBJECT MODULE PLACED IN SMC1602.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\SMC1602.c BROWSE INCDIR(.\include) DEBUG OBJECTEXTEND PRINT(.\SMC160
                    -2.lst) OBJECT(SMC1602.obj)

line level    source

   1          //*************************************************************************************************
   2          //*                                                                                                                                                                                               *
   3          //*             ***************************ＳＭＣ１６０２驱动程序*************************                                *
   4          //*                                                                                                                                                                                               *
   5          //*************************************************************************************************
   6          
   7          
   8          //*************************************************************************************************
   9          //*                                                                                                                                                                                               *
  10          //*                      ******************************头文件及宏定义**************************                           *
  11          //*                                                                                                                                                                                               *
  12          //*************************************************************************************************
  13          #include <at89x51.h>
  14          
  15          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<端口设置宏定义>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  16          #define LCDRS P3_5                                                                 //寄存器选择信号：
  17                                                                                                             //           0--数据寄存器；
  18                                                                                                             //           1--指令寄存器。
  19          
  20          #define LCDRW P3_6                                                                 //读写信号：
  21                                                                                                             //           1--读LCD；
  22                                                                                                             //           0--写LCD。
  23          
  24          #define LCDE P3_7                                                                  //片选信号，当输入下降沿信号时，
  25                                                                                                             //执行指令或传送数据。
  26          
  27          #define LCDPORT P0                                                                 //LCD数据接口。
  28          
  29          
  30          
  31          //*************************************************************************************************
  32          //*                                                                                                                                                                                               *
  33          //*                      ******************************延时函数*****************************                              *
  34          //*                                                                                                                                                                                               *
  35          //*************************************************************************************************
  36          void vDelay()
  37          {
  38   1              unsigned int uiCount;
  39   1              for(uiCount=0;uiCount<250;uiCount++);
  40   1      }
  41          
  42          
  43          //*************************************************************************************************
  44          //*                                                                                                                                                                                               *
  45          //*                      **************************把1个命令写入LCD*************************                              *
  46          //*                                                                                                                                                                                               *
  47          //*************************************************************************************************
  48          void vWriteCMD(unsigned char ucCommand)                                   
  49          {
  50   1              vDelay();                               //先延时。
  51   1      
  52   1              LCDE=1;                                 //然后把ＬＣＤ改为写入命令状态。
  53   1              LCDRS=0;
  54   1              LCDRW=0;
C51 COMPILER V8.05a   SMC1602                                                              08/11/2007 12:25:47 PAGE 2   

  55   1      
  56   1              LCDPORT=ucCommand;              //再输出命令。
  57   1      
  58   1              LCDE=0;                                 //最后执行命令。
  59   1      }
  60          
  61          
  62          //*************************************************************************************************
  63          //*                                                                                                                                                                                               *
  64          //*                      ***************************把1个数据写入LCD************************                              *
  65          //*                                                                                                                                                                                               *
  66          //*************************************************************************************************
  67          void vWriteData(unsigned char ucData)                                     
  68          {
  69   1              vDelay();                          //先延时。
  70   1      
  71   1              LCDE=1;                            //然后把ＬＣＤ改为写入数据状态。
  72   1              LCDRS=1;
  73   1              LCDRW=0;
  74   1      
  75   1              LCDPORT=ucData;            //再输出数据。
  76   1      
  77   1              LCDE=0;                            //最后显示数据。
  78   1      }
  79          
  80          
  81          
  82          //*************************************************************************************************
  83          //*                                                                                                                                                                                               *
  84          //*                      **********************把1个字符显示到当前光标处*********************                             *
  85          //*                                                                                                                                                                                               *
  86          //*************************************************************************************************
  87          void vShowOneChar(unsigned char ucChar)
  88          {
  89   1              switch(ucChar)
  90   1                      {
  91   2                      case ' ': vWriteData(0x20);break;
  92   2                      case '!': vWriteData(0x21);break;
  93   2                      case '"': vWriteData(0x22);break;
  94   2                      case '#': vWriteData(0x23);break;
  95   2                      case '$': vWriteData(0x24);break;
  96   2                      case '%': vWriteData(0x25);break;
  97   2                      case '&': vWriteData(0x26);break;
  98   2                      case '>': vWriteData(0x27);break;
  99   2                      case '(': vWriteData(0x28);break;
 100   2                      case ')': vWriteData(0x29);break;
 101   2                      case '*': vWriteData(0x2A);break;
 102   2                      case '+': vWriteData(0x2B);break;
 103   2                      case '-': vWriteData(0x2D);break;
 104   2                      case '.': vWriteData(0x2E);break;
 105   2                      case '/': vWriteData(0x2F);break;
 106   2                      case '=': vWriteData(0x3D);break;
 107   2                      case '<': vWriteData(0x3E);break;
 108   2                      case '?': vWriteData(0x3F);break;
 109   2                      case '^': vWriteData(0x5E);break;
 110   2                      case ':': vWriteData(0x3A);break;
 111   2      
 112   2                      case '0': vWriteData(0x30);break;
 113   2                      case '1': vWriteData(0x31);break;
 114   2                      case '2': vWriteData(0x32);break;
 115   2                      case '3': vWriteData(0x33);break;
 116   2                      case '4': vWriteData(0x34);break;
C51 COMPILER V8.05a   SMC1602                                                              08/11/2007 12:25:47 PAGE 3   

 117   2                      case '5': vWriteData(0x35);break;
 118   2                      case '6': vWriteData(0x36);break;
 119   2                      case '7': vWriteData(0x37);break;
 120   2                      case '8': vWriteData(0x38);break;
 121   2                      case '9': vWriteData(0x39);break;
 122   2      
 123   2                      case 'A': vWriteData(0x41);break;
 124   2                      case 'B': vWriteData(0x42);break;
 125   2                      case 'C': vWriteData(0x43);break;
 126   2                      case 'D': vWriteData(0x44);break;
 127   2                      case 'E': vWriteData(0x45);break;
 128   2                      case 'F': vWriteData(0x46);break;
 129   2                      case 'G': vWriteData(0x47);break;
 130   2                      case 'H': vWriteData(0x48);break;
 131   2                      case 'I': vWriteData(0x49);break;
 132   2                      case 'J': vWriteData(0x4A);break;
 133   2                      case 'K': vWriteData(0x4B);break;
 134   2                      case 'L': vWriteData(0x4C);break;
 135   2                      case 'M': vWriteData(0x4D);break;
 136   2                      case 'N': vWriteData(0x4E);break;
 137   2                      case 'O': vWriteData(0x4F);break;
 138   2                      case 'P': vWriteData(0x50);break;
 139   2                      case 'Q': vWriteData(0x51);break;
 140   2                      case 'R': vWriteData(0x52);break;
 141   2                      case 'S': vWriteData(0x53);break;
 142   2                      case 'T': vWriteData(0x54);break;
 143   2                      case 'U': vWriteData(0x55);break;
 144   2                      case 'V': vWriteData(0x56);break;
 145   2                      case 'W': vWriteData(0x57);break;
 146   2                      case 'X': vWriteData(0x58);break;
 147   2                      case 'Y': vWriteData(0x59);break;
 148   2                      case 'Z': vWriteData(0x5A);break;
 149   2      
 150   2                      case 'a': vWriteData(0x61);break;
 151   2                      case 'b': vWriteData(0x62);break;
 152   2                      case 'c': vWriteData(0x63);break;
 153   2                      case 'd': vWriteData(0x64);break;
 154   2                      case 'e': vWriteData(0x65);break;
 155   2                      case 'f': vWriteData(0x66);break;
 156   2                      case 'g': vWriteData(0x67);break;
 157   2                      case 'h': vWriteData(0x68);break;
 158   2                      case 'i': vWriteData(0x69);break;
 159   2                      case 'j': vWriteData(0x6A);break;
 160   2                      case 'k': vWriteData(0x6B);break;
 161   2                      case 'l': vWriteData(0x6C);break;
 162   2                      case 'm': vWriteData(0x6D);break;
 163   2                      case 'n': vWriteData(0x6E);break;
 164   2                      case 'o': vWriteData(0x6F);break;
 165   2                      case 'p': vWriteData(0x70);break;
 166   2                      case 'q': vWriteData(0x71);break;
 167   2                      case 'r': vWriteData(0x72);break;
 168   2                      case 's': vWriteData(0x73);break;
 169   2                      case 't': vWriteData(0x74);break;
 170   2                      case 'u': vWriteData(0x75);break;
 171   2                      case 'v': vWriteData(0x76);break;
 172   2                      case 'w': vWriteData(0x77);break;
 173   2                      case 'x': vWriteData(0x78);break;
 174   2                      case 'y': vWriteData(0x79);break;
 175   2                      case 'z': vWriteData(0x7A);break;
 176   2      
 177   2                      default: break;
 178   2                      }
C51 COMPILER V8.05a   SMC1602                                                              08/11/2007 12:25:47 PAGE 4   

 179   1      }
 180          
 181          //*************************************************************************************************
 182          //*                                                                                                                                                                                               *
 183          //*                      *********************把1个字符串显示到当前光标处*******************                              *
 184          //*                                                                                                                                                                                               *
 185          //*************************************************************************************************
 186          void vShowChar(unsigned char ucaChar[])
 187          {
 188   1              unsigned char ucCount;
 189   1              for(ucCount=0;;ucCount++)
 190   1                      {
 191   2                      vShowOneChar(ucaChar[ucCount]);
 192   2                      if(ucaChar[ucCount+1]=='\0')
 193   2                              break;
 194   2                      }
 195   1      }
 196          
 197          
 198          
 199          /*
 200          //*************************************************************************************************
 201          //*                                                                                                                                                                                               *
 202          //*                      *********************把1个3位数字显示到当前光标处*******************                             *
 203          //*                                                                                                                                                                                               *
 204          //*************************************************************************************************
 205          void vShowNumber(unsigned int uiNumber)
 206          {
 207                  unsigned char ucaNumber[3],ucCount;
 208          
 209                  if(uiNumber>999)                                        
 210                          uiNumber=999;
 211          
 212                  ucaNumber[0]=uiNumber/100;                                                              //把计算数字的每个位存入数组。
 213                  ucaNumber[1]=(uiNumber-100*(int)ucaNumber[0])/10;                                                       
 214                  ucaNumber[2]=uiNumber-100*(int)ucaNumber[0]-10*ucaNumber[1];
 215          
 216                  for(ucCount=0;ucCount<3;ucCount++)
 217                          {
 218                          vShowOneChar(ucaNumber[ucCount]+48);                            //从首位到末位逐一输出。
 219                          }
 220          
 221          }
 222          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    772    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
