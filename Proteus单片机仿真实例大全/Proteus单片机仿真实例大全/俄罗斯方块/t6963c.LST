C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE T6963C
OBJECT MODULE PLACED IN t6963c.OBJ
COMPILER INVOKED BY: D:\Program Files\keil\C51\BIN\C51.EXE t6963c.c COMPACT BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <AT89X52.h>    
   2          #include "t6963c.h"
   3          #include "fangkuai.h"
   4          #include "typedef.h"
   5          
   6          static uint txthome=0x0000;
   7          static uint grshome=0x1000;
   8          
   9          //LCD接口定义
  10          sfr   PORTD = 0x90 ;
  11          sbit  PCD = P2^7 ;
  12          sbit  PWR = P2^5 ;
  13          sbit  PRD = P2^6 ;
  14          
  15          //常量数据
  16          unsigned char code CCTable[] = {
  17          /*冯   CB7EB */
  18          0x00,0x47,0x20,0x29,0x09,0x09,0x11,0x13,0x21,0xE0,0x2F,0x20,0x20,0x20,0x20,0x20,
  19          0x00,0xF8,0x08,0x08,0x10,0x10,0x10,0xFC,0x04,0x04,0xF4,0x04,0x04,0x04,0x28,0x10,
  20          
  21          /*燕   CD1E0 */
  22          0x04,0x04,0xFF,0x04,0x17,0x10,0xF7,0x14,0x34,0xD7,0x00,0x28,0x24,0x66,0xC2,0x00,
  23          0x40,0x40,0xFE,0x40,0xC0,0x14,0xDE,0x50,0x52,0xCE,0x00,0x88,0x44,0x66,0x22,0x00,
  24          
  25          /*辉   CBBD4 */
  26          0x10,0x13,0x96,0x58,0x51,0xFE,0x28,0x28,0x29,0x28,0x28,0x2B,0x4C,0x48,0x80,0x00,
  27          0x00,0xFE,0x44,0x40,0xFC,0x40,0xA0,0xA0,0xFC,0x20,0x20,0xFE,0x20,0x20,0x20,0x20,
  28          
  29          /*制   CD6C6 */
  30          0x24,0x34,0x24,0x3F,0x44,0x04,0x7F,0x04,0x3F,0x24,0x24,0x24,0x24,0x27,0x05,0x04,
  31          0x04,0x04,0x24,0xA4,0x24,0x24,0xA4,0x24,0xA4,0xA4,0xA4,0xA4,0x84,0x84,0x14,0x08,
  32          
  33          /*作   CD7F7 */
  34          0x08,0x0C,0x09,0x13,0x12,0x34,0x50,0x90,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
  35          0x80,0x80,0x00,0xFE,0x80,0x88,0xFC,0x80,0x80,0x84,0xFE,0x80,0x80,0x80,0x80,0x80,
  36          
  37          /*得   CB5C3 */
  38          0x13,0x1A,0x23,0x4A,0x8B,0x10,0x13,0x30,0x50,0x97,0x10,0x11,0x11,0x11,0x10,0x10,
  39          0xF8,0x08,0xF8,0x08,0xF8,0x00,0xFE,0x10,0x10,0xFE,0x10,0x10,0x10,0x10,0x50,0x20,
  40          
  41          /*分   CB7D6 */
  42          0x08,0x0C,0x08,0x10,0x10,0x20,0x40,0x9F,0x04,0x04,0x04,0x04,0x08,0x10,0x20,0x40,
  43          0x80,0x80,0x40,0x20,0x30,0x18,0x0E,0xE4,0x20,0x20,0x20,0x20,0x20,0xA0,0x40,0x00,
  44          
  45          /*等   CB5C8 */
  46          0x20,0x3E,0x28,0x45,0x85,0x3F,0x01,0xFF,0x00,0x00,0x7F,0x04,0x02,0x02,0x00,0x00,
  47          0x80,0xFC,0xA0,0x10,0x10,0xF8,0x00,0xFE,0x20,0x20,0xFC,0x20,0x20,0x20,0xA0,0x40,
  48          
  49          /*级   CBCB6 */
  50          0x10,0x13,0x20,0x24,0x44,0xF8,0x10,0x21,0x7D,0x41,0x02,0x1A,0xE4,0x08,0x11,0x06,
  51          0x00,0xF8,0x88,0x88,0x90,0x90,0xBE,0x44,0x44,0x48,0x28,0x10,0x30,0x48,0x8E,0x04,
  52          
  53          /*按   CB0B4 */
  54          0x10,0x10,0x10,0x13,0xFE,0x10,0x14,0x1B,0x30,0xD1,0x11,0x10,0x10,0x11,0x56,0x20,
  55          0x40,0x20,0x20,0xFE,0x04,0x40,0x40,0xFE,0x88,0x10,0x90,0x60,0x58,0x8E,0x04,0x00,
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 2   

  56          
  57          /*开   CBFAA */
  58          0x00,0x7F,0x04,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x08,0x08,0x10,0x20,0x40,0x00,
  59          0x00,0xFE,0x20,0x20,0x20,0x20,0xFE,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,
  60          
  61          /*始   CCABC */
  62          0x10,0x18,0x10,0x10,0xFC,0x25,0x24,0x44,0x44,0x28,0x18,0x14,0x22,0x42,0x80,0x00,
  63          0x20,0x30,0x20,0x48,0x84,0xFE,0x84,0x00,0xFC,0x84,0x84,0x84,0x84,0xFC,0x84,0x00,
  64          
  65          /*太   CCCAB */
  66          0x01,0x01,0x01,0x01,0x7F,0x01,0x01,0x01,0x02,0x02,0x04,0x05,0x08,0x10,0x20,0x40,
  67          0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x98,0xCC,0x86,0x04,
  68          
  69          /*棒   CB0F4 */
  70          0x20,0x20,0x27,0x20,0xFB,0x20,0x77,0x69,0xA2,0xAD,0x20,0x27,0x20,0x20,0x20,0x20,
  71          0x40,0x40,0xFC,0x40,0xF8,0x80,0xFE,0x20,0x58,0xF6,0x40,0xFC,0x40,0x40,0x40,0x40,
  72          
  73          /*了   CC1CB */
  74          0x00,0x7F,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x05,0x02,
  75          0x00,0xFC,0x18,0x60,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  76          
  77          /*！   CA3A1 */
  78          0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x10,0x00,
  79          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  80          
  81          };
  82          
  83          
  84          /////////////////////////底层调用小函数/////////////////////////////////////////
  85          ////////////////////////////////////////////////////////////////////////////////
  86          
  87          //延时几微秒
  88          void delay(void)
  89          {
  90   1       uchar i=0;
  91   1       i++;
  92   1       i++;
  93   1       }
  94          //读状态位0和1，sta0=1:指令读写状态准备好；sta1=1:数据读写状态准备好 
  95          void ST01Read(void)
  96          {
  97   1        
  98   1              PORTD=0XFF;
  99   1              while(1){
 100   2                      PCD=1;          
 101   2                      PRD=0;          
 102   2                      PRD=1;          
 103   2                      if ((PORTD^0==1)&&(PORTD^1==1))  break;  //判断指令、数据读写状态是否准备好
 104   2              
 105   2              }
 106   1      }
 107          
 108          //读状态位sta2,    检测数据自动 读 状态是否准备好 
 109          static void ST2Read(void)
 110          {
 111   1        
 112   1              PORTD=0XFF;
 113   1              while(1){
 114   2                      PCD=1;           
 115   2                      PRD=0;          
 116   2                      PRD=1;                                           
 117   2                      if (PORTD^2==1)  break;  
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 3   

 118   2              }
 119   1      }
 120          
 121          //读状态位sta3,    sta3=1:数据自动 写 状态准备好 
 122          static void ST3Read(void){
 123   1        
 124   1              PORTD=0XFF;
 125   1              while(1)
 126   1              {
 127   2                      PCD=1;          
 128   2                      PRD=0;          
 129   2                      PRD=1;          
 130   2                      if (PORTD^3==1)  break; 
 131   2              }
 132   1      }
 133          
 134          //读状态位sta6,   检测屏读或屏拷贝出错状态：sta6=1:出错；sta6=0:正确 
 135          static void ST6Read(void)
 136          {
 137   1        
 138   1              PORTD=0XFF;
 139   1              while(1)
 140   1              {
 141   2                      PCD=1;          
 142   2                      PRD=0;          
 143   2                      PRD=1;                  
 144   2                      if (PORTD^6==0)  break;  
 145   2              }
 146   1      }
 147          
 148          //////////////////////////////////对T6963C进行读写数据/////////////////////////////////
 149          
 150          //写数据
 151          static void WRData(uchar DData)
 152          {
 153   1              ST01Read();
 154   1              PCD=0;                  
 155   1              PORTD=DData;
 156   1              PWR=0;
 157   1              PWR=1;                  
 158   1      } 
 159          
 160          ///读数据
 161          static void RDData(void)
 162          {
 163   1              ST01Read();             
 164   1              PCD=0;                          
 165   1              PRD=0;                          
 166   1              PRD=1;                  
 167   1      }
 168          
 169          //写命令
 170          static void WRCommand(uchar command)
 171          {
 172   1              ST01Read();             
 173   1              PCD=1;           
 174   1              PWR=0;                  
 175   1              PORTD=command;      
 176   1              PWR=1;          
 177   1      }
 178          
 179          //单参数指令
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 4   

 180          static void WRCommandOne(uchar data1,uchar command)
 181          {
 182   1              WRData(data1);          //写数据
 183   1              WRCommand(command);     //写命令
 184   1      }
 185          //双参数指令
 186          static void WRCommandTwo(uchar data1,uchar data2,uchar command)
 187          {
 188   1              WRData(data1);          //写数据
 189   1              WRData(data2);          //写数据
 190   1              WRCommand(command);     //写命令
 191   1      }
 192          
 193          ////////////////////////////////////////////////////////////////////////////////////
 194          
 195          /////////////////////////////T6963C常用处理程序/////////////////////////////////////
 196          ////////////////////////////////////////////////////////////////////////////////////
 197          
 198          //初始化T6963 LCD 显示
 199          void Init_LCD_Graphic(void)
 200          {
 201   1              
 202   1              //设置文本显示首地址
 203   1              
 204   1              WRCommandTwo(0x00,0x00,0x40);
 205   1              
 206   1              //设置文本显示区宽度 40字节
 207   1          
 208   1              WRCommandTwo(0x10,0x00,0x41);
 209   1              
 210   1              //设置图形显示区首地址
 211   1              
 212   1              WRCommandTwo(0x00,0x10,0x42);           //首地址0x0800
 213   1              
 214   1              //设置图形显示区宽度
 215   1              
 216   1              WRCommandTwo(0x10,0x00,0x43);   //40字节
 217   1      
 218   1          //设置CGRAM的首地址
 219   1      
 220   1              WRCommandTwo(0x03,0x00,0x22);           
 221   1                      
 222   1              //设置显示方式  
 223   1                      
 224   1              WRCommand(0x80);                //启用内部字符发生器，显示方式是文本与图形逻辑或
 225   1              
 226   1              //设置显示状态  
 227   1                              
 228   1              WRCommand(0x9f);        //启用光标闪烁、光标显示、文本显示、图形显示
 229   1         
 230   1      }
 231          
 232          //清显示RAM
 233          void ClrGraphic(void){
 234   1          uint i;
 235   1              //设置显示地址
 236   1                              
 237   1              WRCommandTwo(0x00,0x00,0x24);
 238   1              
 239   1              //进入自动写方式
 240   1              
 241   1              WRCommand(0xb0);        
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 5   

 242   1              //清8KRAM       
 243   1              
 244   1              for(i=0;i<256;i++){
 245   2              
 246   2                      WRData(0x00);
 247   2              }       
 248   1              //退出自动写方式
 249   1              
 250   1              WRCommand(0xb2);
 251   1      }
 252          
 253          /////////////////////////////////////////////////////////////////////////
 254          //***********************************************************************
 255          //= 函数原型: void char_addr_Pointer_Set(uchar x, uchar y)
 256          //= 功    能: 根据字符的行列设置vram地址
 257          //= 参    数: x行坐标，y列坐标
 258          //= 返 回 值:
 259          //= 函数性质：私有函数
 260          //***********************************************************************
 261          
 262          void char_addr_Pointer_Set(uchar x, uchar y)
 263          {
 264   1          uint iPos;
 265   1              uint temp;
 266   1          iPos = y * 16 + x + txthome;
 267   1              temp=iPos;
 268   1              y=iPos>>8;
 269   1              x=temp&0x00ff;
 270   1          WRCommandTwo(x,y,0x24);
 271   1      } 
 272          
 273          //************************************************************************
 274          //= 函数原型: void image_addr_Pointer_Set(uchar x, uchar y)
 275          //= 功    能: 根据的行列设置图形字节的地址
 276          //= 参    数:
 277          //= 返 回 值:
 278          //= 函数性质：私有函数
 279          //************************************************************************
 280          void image_addr_Pointer_Set(uchar x, uchar y)
 281          { 
 282   1          uint iPos;
 283   1              uint temp;
 284   1          iPos =y * 16 + x + grshome;
 285   1              temp=iPos;
 286   1              x=iPos>>8;
 287   1              y=temp&0x00ff;
 288   1          WRCommandTwo(y,x,0x24);
 289   1      }
 290          
 291          //**************************************************************************
 292          //= 函数原型: void Point(uchar x,uchar y, bit Mode)
 293          //= 功    能: 在指定坐标位置显示一个点
 294          //= 参    数: 坐标,显示点或清除点                               
 295          //= 返 回 值:
 296          //= 函数性质：私有函数
 297          //= Mode 1:显示 0:清除该点
 298          //**************************************************************************
 299          void Point(uchar x,uchar y, bit Mode)
 300          {
 301   1          uint Address;
 302   1              uint temp;
 303   1          uchar dat;
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 6   

 304   1          Address=(uint)y*16 + (x>>3) + grshome;        //地址转化
 305   1          dat=0xF0+7-x%8;        //产生位操作命令画点的数据
 306   1          if(Mode) dat=dat|0x08;
 307   1              temp=Address;
 308   1              x=Address>>8;
 309   1              y=temp&0x00ff;
 310   1              WRCommandTwo(y,x,0x24);  //设置该点所在单元地址
 311   1          WRCommand(dat);         // 利用位操作命令画点
 312   1      }
 313          
 314          //*****************************************************************************
 315          //= 函数原型: void char_wr(uchar x,uchar y, uchar *p,uchar dataa,uchar n)
 316          //= 功    能: 连续写入一个或多个字符
 317          //= 参    数: 坐标,要显示的字符数组，显示的单个字符，要显示的字符个数                           
 318          //= 返 回 值:
 319          //= 函数性质：私有函数
 320          //当n=0一次性写入一个字符，否则一次性写入多个字符
 321          //*****************************************************************************
 322          
 323          void char_wr(uchar x,uchar y, uchar *p,uchar dataa,uchar n)
 324          {
 325   1          uchar i;
 326   1              char_addr_Pointer_Set(x,y);     //写入地址
 327   1              if(n==0)
 328   1                WRCommandOne(dataa,0xc0);       //一次写入数据
 329   1              else
 330   1                {
 331   2                  WRCommand(0xb0);//进入自动写
 332   2                      for(i=0;i<n;i++)
 333   2                        WRData(p[i]);  
 334   2                        WRCommand(0xb2);   //退出自动写
 335   2                }
 336   1      }
 337          
 338          
 339          //******************************************************************************
 340          //= 函数原型: void hanzhi(uchar x,uchar y, uchar m,uchar n)
 341          //= 功    能: 连续写入一个或多个汉字
 342          //= 参    数: 坐标,要显示的第一个汉字的位置，连续显示汉字的个数。                               
 343          //= 返 回 值:
 344          //= 函数性质：私有函数
 345          //当n=1一次性写入一个字符，否则一次性写入多个字符
 346          //*****************************************************************************
 347          
 348          void hanzhi(uchar x,uchar y, uchar m,uchar n)
 349          {
 350   1          uchar i;
 351   1          uchar CGRam;
 352   1              CGRam=0x80+4*m;  //第m个字符
 353   1              for(i=0;i<n;i++)
 354   1              {
 355   2                char_addr_Pointer_Set(x,y); //汉字左上角写入
 356   2                WRCommandOne(CGRam,0xc0);       //一次写入数据;
 357   2                CGRam++;
 358   2                y++;
 359   2                char_addr_Pointer_Set(x,y); //汉字左下角写入
 360   2                WRCommandOne(CGRam,0xc0);
 361   2                CGRam++;
 362   2                x++;
 363   2                y--;
 364   2                char_addr_Pointer_Set(x,y); //汉字右上角写入
 365   2                WRCommandOne(CGRam,0xc0);
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 7   

 366   2                CGRam++;
 367   2                y++;
 368   2                char_addr_Pointer_Set(x,y); //汉字右下角写入
 369   2                WRCommandOne(CGRam,0xc0);
 370   2                CGRam++;
 371   2                x++;
 372   2                y--;
 373   2                if(x==16)
 374   2                {
 375   3                  x=0;                //写满一行，从第二行开始
 376   3                      y++;
 377   3                      y++;
 378   3                }
 379   2              }
 380   1      }
 381          
 382          //******************************************************************************
 383          //= 函数原型: void fill_CGRAM(uchar *p,uchar m,uinit n)
 384          //= 功    能: 填充CGRAM数据
 385          //= 参    数: 字符数组，写入第m个汉字，循环写入的汉字个数
 386          //= 返 回 值:
 387          //= 函数性质：私有函数
 388          //*//**************************************************************************
 389          
 390          void fill_CGRAM(uchar *p,uchar m,uint n)
 391          {
 392   1        uchar xx;
 393   1        uchar yy;
 394   1        uint i;
 395   1        uint ADCGram;
 396   1        uint temp;
 397   1        ADCGram=0x1c00+32*m;  //确定CGRAM地址
 398   1        temp=ADCGram;
 399   1        xx=ADCGram>>8;
 400   1        yy=temp&0x00ff;
 401   1        WRCommandTwo(yy,xx,0x24);
 402   1      
 403   1        n=n*32;
 404   1        WRCommand(0xb0);
 405   1        for(i=0;i<n;i++)
 406   1              WRData(p[i]);
 407   1        WRCommand(0xb2);   //退出自动写
 408   1      }
 409          
 410          //*******************************************************************************
 411          //= 函数原型: void Wr_line(uchar type,uchar x1,uchar y1, uchar Long,uchar mode)
 412          //= 功    能: 画一条横线或一条竖线
 413          //= 参    数: type=1为横线，否则为竖线，(x1,y1)为起始点，Long为长度，mode=1为显示                               
 414          //= 返 回 值:
 415          //= 函数性质：公有函数
 416          //*******************************************************************************  
 417          
 418          void Wr_line(uchar type,uchar x1,uchar y1, uchar Long,uchar mode){
 419   1       uchar i;
 420   1      if(type==1)
 421   1       {
 422   2         for(i=0;i<Long;i++)   //画横线
 423   2              { 
 424   3                 if(mode==1)
 425   3                        Point(x1+i,y1,1);
 426   3                 else  
 427   3                        Point(x1+i,y1,0);
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 8   

 428   3               }
 429   2               return;
 430   2        }
 431   1        
 432   1      else
 433   1       {
 434   2          for(i=0;i<Long;i++)         //画竖线
 435   2              { 
 436   3                 if(mode==1)
 437   3                        Point(x1,y1+i,1);
 438   3                 else  
 439   3                        Point(x1,y1+i,0);
 440   3              }
 441   2               return; 
 442   2        }
 443   1      }
 444          
 445          //*****************************************************************************
 446          //= 函数原型: void Show_Image(uchar x1,uchar y1,uchar x2,uchar y2,bit mode)
 447          //= 功    能: 填充区域（x1,y1) (x2,y2)
 448          //= 参    数: (x1,y1)为起始点，（x2,y2)为终点  mode=1显示                               
 449          //= 返 回 值:
 450          //= 函数性质：私有函数
 451          //= 注    意：以点为单位
 452          //*****************************************************************************          
 453          
 454          void Show_Image(uchar x1,uchar y1,uchar x2,uchar y2,bit mode)
 455          {
 456   1        char temp=x1;
 457   1        if(mode)   
 458   1         {
 459   2               for(;y1<=y2;y1++)
 460   2                 for(x1=temp;x1<=x2;x1++)
 461   2                   Point(x1,y1,1);
 462   2         }
 463   1         else
 464   1         {
 465   2               for(;y1<=y2;y1++)
 466   2                 for(x1=temp;x1<=x2;x1++)
 467   2                   Point(x1,y1,0);
 468   2         }
 469   1      }
 470          
 471          //**********************************************************************************
 472          //= 函数原型: void image(uchar x1,uchar y1,uchar x2,uchar y2,uchar *p,bit mode)
 473          //= 功    能: 在设定的区域连续写入多个字节，作图形显示用
 474          //= 参    数: (x1,y1)为起始点，（x2,y2)为终点  *po为图形数组，mode=1显示 mode=0清除                     
 475          //= 返 回 值:
 476          //= 函数性质：私有函数
 477          //= 操作方法：当p=0,mode=1时，连续输入0xff,作反显用，当p=0,mode=0时，连续输入0x00,作 
 478          //=            消除反显用,当p!=0时，作输入图像用，此时mode无效
 479          //= 注    意：参数的数据范围
 480          //**********************************************************************************  
 481          void image(uchar x1,uchar y1,uchar x2,uchar y2,uchar *p,bit mode)
 482          {
 483   1         uchar temp=x1;
 484   1         uint i=0;
 485   1         for(;y1<=y2;y1++)
 486   1         {
 487   2          x1=temp;     
 488   2          image_addr_Pointer_Set(x1,y1);      //写入地址
 489   2              WRCommand(0xb0); //进入自动写
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 9   

 490   2              for(;x1<=x2;x1++)
 491   2              {
 492   3                if(p==0&&mode==1)
 493   3                {
 494   4                   WRData(0xff);
 495   4                }
 496   3                else if(p==0&&mode==0)
 497   3                {
 498   4                   WRData(0x00);
 499   4                }
 500   3                else 
 501   3                {
 502   4                   WRData(p[i]);
 503   4                   i++;                //下一个字节
 504   4                }
 505   3              }
 506   2          WRCommand(0xb2);   //退出自动写 
 507   2          }
 508   1      }
 509          
 510          //******************************************************************************
 511          //= 函数原型: void negShow(uchar x1,uchar y1,uchar x2,uchar y2,bit mode)
 512          //= 功    能: 反显区域（x1,y1) (x2,y2)
 513          //= 参    数: (x1,y1)为起始点，（x2,y2)为终点  mode=1反显                               
 514          //= 返 回 值:
 515          //= 函数性质：私有函数
 516          //= 注    意：以字节为单位
 517          //******************************************************************************         
 518          void negShow(uchar x1,uchar y1,uchar x2,uchar y2,bit mode)
 519          {
 520   1         if(mode)
 521   1         {
 522   2           WRCommand(0x81);           //启用内部字符发生器，显示方式是文本与图形逻辑异或
 523   2               image(x1,y1,x2,y2,0,1);
 524   2      
 525   2              }
 526   1         else
 527   1          {
 528   2                WRCommand(0x80);              //启用内部字符发生器，显示方式是文本与图形逻辑或
 529   2                image(x1,y1,x2,y2,0,0);
 530   2               }
 531   1      }
 532          
 533          //******************************************************************************
 534          //= 函数原型: void Show_num(uchar x1,uchar y1,uchar num)
 535          //= 功    能: 在设定的位置显示一个数字
 536          //= 参    数: (x1,y1)为位置，num为数字                  
 537          //= 返 回 值:
 538          //= 函数性质：公有函数
 539          //= 注    意：以字节为单位
 540          //*****************************************************************************  
 541          void Show_num(uchar x1,uchar y1,uchar num)
 542          {
 543   1         uchar number[10]={0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19};
 544   1         char_addr_Pointer_Set(x1,y1);
 545   1         WRCommandOne(number[num],0xc0);        //一次写入数据
 546   1      }
 547          
 548          ///////////////////////////初始化LCD////////////////////////////////////////////
 549          void Init_LCD()
 550          {
 551   1         Init_LCD_Graphic();
C51 COMPILER V8.02   T6963C                                                                11/26/2006 21:57:40 PAGE 10  

 552   1         ClrGraphic();
 553   1         fill_CGRAM(CCTable,0,22);     //将汉字写入CGRAM
 554   1      }
 555          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1126    ----
   CONSTANT SIZE    =    522    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      4      61
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
