C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE FANGKUAI
OBJECT MODULE PLACED IN fangkuai.OBJ
COMPILER INVOKED BY: D:\Program Files\keil\C51\BIN\C51.EXE fangkuai.c COMPACT BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "t6963c.h"
   2          #include "typedef.h"
   3          #include "key.h"
   4          
   5          #define X_START 5
   6          #define Y_START 0
   7          #define MIN_SLOW_SPEED  300
   8          #define BX_START  30
   9          #define BY_START  15
  10          #define Nothing   100
  11          
  12          
  13          //全局数据
  14          code uchar Game_Char[]={0x27,0x41,0x4d,0x45};
  15          code uchar Over_Char[]={0x2f,0x56,0x45,0x52};
  16                                                                      
  17          static uchar xx,yy;         //方块的位置
  18          static uint  Game_Score=0;
  19          static uchar xdata Platform[14][21];    //游戏平台数据
  20          static uchar This_shape;                                //当前形状
  21          static uchar Next_shape=0;
  22          static uint  Game_Speed=MIN_SLOW_SPEED;  //等级速度，正常情况，方块下降的速度
  23          static uchar Game_Stop=1;
  24          static uchar Game_Level=0;
  25          
  26          /////////////////////////////////////////////////////////////////////////////////
  27          /////////////////////////////////////////////////////////////////////////////////
  28          /////////方块形状的定义//////////////////////////////////////////////////////////
  29          /////////////////////////////////////////////////////////////////////////////////
  30          struct POINT{
  31                        uchar x;
  32                        uchar y;
  33                       };
  34          
  35          struct SHAPE{
  36                         struct POINT point[4];
  37                                     uchar next;  //下一个形状
  38                                   } 
  39          
  40          
  41          xdata shape[19]={ 
  42            
  43                             { 1,0,0,1,1,1,2,1,1  },
  44                                             { 1,0,1,1,2,1,1,2,2  },
  45                                             { 0,0,1,0,2,0,1,1,3  },
  46                                             { 1,0,0,1,1,1,1,2,0  },
  47                                              
  48                                             { 1,0,2,0,1,1,1,2,5  },
  49                                             { 0,0,1,0,2,0,2,1,6  },
  50                                             { 2,0,2,1,2,2,1,2,7  },
  51                                             { 0,0,0,1,1,1,2,1,4  },
  52          
  53                                             { 1,0,2,0,2,1,2,2,9  },
  54                                             { 2,0,0,1,1,1,2,1,10 },
  55                                             { 1,0,1,1,1,2,2,2,11 },
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 2   

  56                                             { 0,0,1,0,2,0,0,1,8  },
  57          
  58                                             { 0,0,0,1,1,1,1,2,13 },
  59                                             { 1,0,2,0,0,1,1,1,12 },
  60          
  61                                             { 2,0,1,1,2,1,1,2,15 },
  62                                             { 0,0,1,0,1,1,2,1,14 },
  63          
  64                                             { 1,0,1,1,1,2,1,3,17 },
  65                                             { 0,1,1,1,2,1,3,1,16 },
  66          
  67                                             { 1,0,2,0,1,1,2,1,18 },      
  68                                                   
  69                                          };   
  70          
  71          ////////////////////////////////////////////////////////////////////////////
  72          //**************************************************************************
  73          //= 函数原型:void Init_GamePlatform()
  74          //= 功    能: 初始化游戏平台
  75          //= 参    数: 无                        
  76          //= 返 回 值: 无
  77          //= 函数性质：公有函数
  78          //= 注    意：
  79          //*************************************************************************** 
  80          void Show_score(uchar);
  81          void Init_GamePlatform()
  82          {
  83   1        uchar i;
  84   1        uchar j;
  85   1        uchar N_Hanzi;
  86   1        
  87   1        Wr_line(1,33,13,64,1 );       //初始化游戏平台边界    画游戏区域
  88   1        Wr_line(1,33,14,64,1 );   //画上横线
  89   1        Wr_line(0,33,15,100,1);
  90   1        Wr_line(0,34,15,100,1);  //画左竖线
  91   1        Wr_line(1,33,115,64,1);  
  92   1        Wr_line(1,33,116,64,1);  //画下横线
  93   1        Wr_line(0,95,15,100,1);
  94   1        Wr_line(0,96,15,100,1);  //画右竖线
  95   1      //--------------------------------------------------------
  96   1        for(i=1;i<13;i++)             //游戏平台数据清零
  97   1        {
  98   2          for(j=0;j<20;j++)
  99   2                {
 100   3                  Platform[i][j]=0;
 101   3                }
 102   2         }
 103   1         for(i=1;i<13;i++)
 104   1         {
 105   2            Platform[i][20]=1;   //游戏平台最下面一行的每一个方块位置为１，作为下边界
 106   2              }
 107   1         
 108   1         for(j=0;j<20;j++)            //游戏平台左右方块位置置１，作为左右边界
 109   1         {
 110   2            Platform[0][j]=1;
 111   2                Platform[13][j]=1;
 112   2         }
 113   1      //--------------------------------------------------------- 
 114   1        N_Hanzi=0;             
 115   1        for(j=3;j<=12;j=j+2)     //输入“冯燕辉制作”汉字
 116   1        {
 117   2           hanzhi(1,j,N_Hanzi,1);
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 3   

 118   2               N_Hanzi++;   //指向下一个汉字
 119   2        }
 120   1        
 121   1        hanzhi(13,3,6,1);      //输入“分”汉字
 122   1        hanzhi(13,8,8,1);   //输入“级”汉字
 123   1      
 124   1        Show_score(0);        //显示初始分数
 125   1        Show_num(13,11,Game_Level);    //显示初始等级水平
 126   1        Game_Speed=MIN_SLOW_SPEED/(Game_Level+1);  //根据水平确定速度
 127   1      
 128   1      //------------------------------------------------------------------
 129   1        Game_Score=0;
 130   1        xx=X_START ;
 131   1        yy=Y_START ;
 132   1      }
 133          ////////////////////////Init_Game/////////////////////
 134          void Init_Game()
 135          {
 136   1        Game_Stop=1;
 137   1        Init_GamePlatform();
 138   1        hanzhi(7,3,9,1);       //输入“按”汉字
 139   1        Show_num(7,6,7);       //显示7
 140   1        hanzhi(7,8,10,1);      //输入“开”汉字
 141   1        hanzhi(7,10,11,1);     //输入“始”汉字
 142   1      }
 143          //**************************************************************************
 144          //= 函数原型:void XiaoFengKuai(uchar x,uchar y,uchar mode)
 145          //= 功    能: 显示一个小方块
 146          //= 参    数: 小方块的横x，坚坐标y,mode=1:显示小方块,mode=0:删除小方块                  
 147          //= 返 回 值:
 148          //= 函数性质：私有函数
 149          //= 注    意：
 150          //*************************************************************************** 
 151          void XiaoFengKuai(uchar x,uchar y,bit mode)
 152          {
 153   1         uchar x1=5*x+BX_START;       //将方块在平台的位置转化成ＬＣＤ的点坐标(地址转换）
 154   1         uchar y1=5*y+BY_START;         
 155   1         uchar i;
 156   1      
 157   1         if(mode==1)
 158   1         {
 159   2      
 160   2             for(i=0;i<5;i++)
 161   2             {
 162   3                Point(x1+i,y1,1); //画一条横线
 163   3             }
 164   2      
 165   2      
 166   2              y1+=4;
 167   2      
 168   2              for(i=0;i<5;i++)
 169   2              {
 170   3                 Point(x1+i,y1,1); //画第二条横线
 171   3               }
 172   2      
 173   2              for(i=0;i<5;i++)
 174   2              {
 175   3                 Point(x1,y1-i,1); //画第1条坚线
 176   3               }
 177   2      
 178   2               x1+=4;
 179   2      
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 4   

 180   2              for(i=0;i<5;i++)
 181   2              {
 182   3                 Point(x1,y1-i,1); //画第2条坚线
 183   3               }
 184   2      
 185   2              y1-=4;
 186   2              for(i=0;i<5;i++)
 187   2              {
 188   3                 Point(x1-i,y1+i,1); //画斜线
 189   3              }
 190   2         }
 191   1      
 192   1        else
 193   1        {
 194   2                 for(i=0;i<5;i++)
 195   2              {
 196   3                Point(x1+i,y1,0); //画一条横线
 197   3              }
 198   2      
 199   2              y1+=4;
 200   2              for(i=0;i<5;i++)
 201   2               {
 202   3                 Point(x1+i,y1,0); //画第二条横线
 203   3               }
 204   2      
 205   2               for(i=0;i<5;i++)
 206   2               {
 207   3                  Point(x1,y1-i,0); //画第1条坚线
 208   3                }
 209   2      
 210   2               x1+=4;
 211   2              for(i=0;i<5;i++)
 212   2                {
 213   3                   Point(x1,y1-i,0); //画第2条坚线
 214   3                }
 215   2      
 216   2              y1-=4;
 217   2              for(i=0;i<5;i++)
 218   2               {
 219   3                 Point(x1-i,y1+i,0); //画斜线
 220   3               }
 221   2              }
 222   1      }
 223          //////////////////////////////////////////////////////////////////////////
 224          ////////////////左冲突检测//////////////////////////////////////////////
 225          bit Left_Anti()
 226          {
 227   1        uchar i;
 228   1        for(i=0;i<4;i++)
 229   1              {
 230   2                if(Platform[xx+shape[This_shape].point[i].x-1][yy+shape[This_shape].point[i].y]==1) 
 231   2                  return 1;
 232   2              }
 233   1        return 0;
 234   1      }          
 235          
 236          ////////////////右冲突检测///////////////////////////////////////////
 237          bit Right_Anti()
 238          {
 239   1        uchar i;
 240   1        for(i=0;i<4;i++)
 241   1              {
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 5   

 242   2                if(Platform[xx+shape[This_shape].point[i].x+1][yy+shape[This_shape].point[i].y]==1)
 243   2                  return 1;
 244   2              }                          
 245   1        return 0;
 246   1        
 247   1      }
 248          
 249          ////////////////////////////////////////下冲突检测//////////////////////////
 250          bit Bottom_Anti()
 251          {
 252   1         uchar i;
 253   1         for(i=0;i<4;i++)
 254   1              {
 255   2                if(Platform[xx+shape[This_shape].point[i].x][yy+shape[This_shape].point[i].y+1]==1)
 256   2                  return 1;
 257   2          }
 258   1        return 0;                       
 259   1      }
 260          //////////////////////////////////改变形状时产生的冲突检测////////////////////
 261          bit Change_Shape_Anti()
 262          {
 263   1         uchar i;
 264   1         for(i=0;i<4;i++)
 265   1              {
 266   2                if(Platform[xx+shape[shape[This_shape].next].point[i].x][yy+shape[shape[This_shape].next].point[i].y]==
             -1)
 267   2                  return 1;      //检测一个形状的冲突情况
 268   2          }
 269   1         return 0;
 270   1      }
 271          //////////////////////////////////产生一个随机数,返回一个随机数///////////////
 272          uchar Random()
 273          {
 274   1        static uchar m;
 275   1        m+=49;
 276   1        return (m%19);
 277   1      }
 278          
 279          //////////////计分函数,参数为 消行行数n///////////////////////////////////////
 280          
 281          void Show_score(uchar n)
 282          {
 283   1        Game_Score=Game_Score+10*n;
 284   1      
 285   1        if(Game_Score<10)
 286   1        {
 287   2           Show_num(13,6,Game_Score%10);              //显示个位
 288   2        }
 289   1        else if(Game_Score<100)
 290   1        {  
 291   2           Show_num(14,6,Game_Score%10);
 292   2               Show_num(13,6,Game_Score/10%100);      //显示个位,十位
 293   2        }
 294   1        else if(Game_Score<1000)
 295   1        {
 296   2           Show_num(14,6,Game_Score%10);
 297   2               Show_num(13,6,Game_Score/10%10);
 298   2               Show_num(12,6,Game_Score/100%10);      //显示个位 ,十位,百位
 299   2        }
 300   1        else
 301   1        {  
 302   2               Show_num(15,6,Game_Score%10);
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 6   

 303   2               Show_num(14,6,Game_Score/10%10);
 304   2               Show_num(13,6,Game_Score/100%10);      //显示个位 ,十位,百位,千位
 305   2               Show_num(12,6,Game_Score/1000);
 306   2        }
 307   1        
 308   1        if(Game_Score%1000==0)
 309   1        {
 310   2          if(Game_Score>0)
 311   2              {
 312   3             Game_Level++;
 313   3             if(Game_Level==10)
 314   3                 {
 315   4                    Game_Stop=1;
 316   4                    hanzhi(7,5,12,1);  //     输出“太棒了"
 317   4                hanzhi(7,7,13,1);      
 318   4                        hanzhi(7,9,14,1);
 319   4                        
 320   4                 }
 321   3             Show_num(13,11,Game_Level);       //显示水平
 322   3              
 323   3          }
 324   2        }
 325   1      }
 326          
 327          //**************************************************************************
 328          //= 函数原型:void Undisplay_line()
 329          //= 功    能: 消除行
 330          //= 参    数: 无                        
 331          //= 返 回 值: 无
 332          //= 函数性质：私有函数
 333          //= 注    意：
 334          //***************************************************************************   
 335          void UnDisplay_line()
 336          {
 337   1         uchar Del_Line;      //标识要删除的行
 338   1         uchar Del_Line_Num=0;     //标识删除的行数
 339   1         uchar i,j,k;
 340   1         bit HavePoint;                   //标识一行中是否有空白点
 341   1      
 342   1         for(i=0;i<4;i++)
 343   1         {
 344   2            for(j=1;j<13;j++)
 345   2                {
 346   3                   if(Platform[j][yy+i]==0) 
 347   3                          break;                   //如果这一行中有一个为空，则退出这一行的循环
 348   3                       else if(j==12)
 349   3                       {
 350   4                          Del_Line=yy+i;             //确定要删除的行
 351   4                              if(Del_Line<20)
 352   4                              {
 353   5                                 Del_Line_Num++;                 //计算共删除的行数
 354   5                              for(k=1;k<13;k++)
 355   5                              {
 356   6                                  XiaoFengKuai(k,Del_Line,0);         //删除行
 357   6                                      Platform[k][Del_Line]=0;         //平台数据清零
 358   6                              }
 359   5                              while(1)     //下移
 360   5                              {
 361   6                                 HavePoint=0;
 362   6                                 for(k=1;k<13;k++)
 363   6                                 {
 364   7                                    if(Platform[k][Del_Line-1]==1)
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 7   

 365   7                                        {
 366   8                                           HavePoint=1;            //标识这一行有要下移的点
 367   8                                           XiaoFengKuai(k,Del_Line-1,0);      //删除小方块
 368   8                                               Platform[k][Del_Line-1]=0;         //平台数据清零
 369   8                                               XiaoFengKuai(k,Del_Line,1) ;   //将小方块下移
 370   8                                               Platform[k][Del_Line]=1;         //平台数据置1,表明此位置已被占用
 371   8                                         }
 372   7                                 }
 373   6                                 if(HavePoint==0) break;  //没有要下移的行，退出本循环
 374   6                                 Del_Line--;   //下移上一行
 375   6                              }
 376   5                              }
 377   4                       }
 378   3            }         
 379   2         }
 380   1         if(Del_Line_Num)
 381   1               {
 382   2                  Show_score(Del_Line_Num);     //刷新分数显示
 383   2               }
 384   1      }                           
 385                                     
 386          //**************************************************************************
 387          //= 函数原型:void Show_shape(uchar x1,uchar y1,uchar Tshape,bit mode)
 388          //= 功    能: 显示一个方块形状或删除一个方块形状
 389          //= 参    数: (x1,y1)为显示位置,Tshape为显示的形状,mode=1为显示,mode=0不显示                    
 390          //= 返 回 值:
 391          //= 函数性质：私有函数
 392          //= 注    意：
 393          //*************************************************************************** 
 394          void Show_shape(uchar x1,uchar y1,uchar Tshape,bit mode)
 395          {
 396   1        if(mode==1)
 397   1        {
 398   2      
 399   2           XiaoFengKuai(x1+shape[Tshape].point[0].x,y1+shape[Tshape].point[0].y,1);    //显示形状
 400   2               XiaoFengKuai(x1+shape[Tshape].point[1].x,y1+shape[Tshape].point[1].y,1);
 401   2               XiaoFengKuai(x1+shape[Tshape].point[2].x,y1+shape[Tshape].point[2].y,1);
 402   2               XiaoFengKuai(x1+shape[Tshape].point[3].x,y1+shape[Tshape].point[3].y,1);
 403   2        }
 404   1        else
 405   1        {
 406   2           XiaoFengKuai(x1+shape[Tshape].point[0].x,y1+shape[Tshape].point[0].y,0);  //删除形状
 407   2               XiaoFengKuai(x1+shape[Tshape].point[1].x,y1+shape[Tshape].point[1].y,0);
 408   2               XiaoFengKuai(x1+shape[Tshape].point[2].x,y1+shape[Tshape].point[2].y,0);
 409   2               XiaoFengKuai(x1+shape[Tshape].point[3].x,y1+shape[Tshape].point[3].y,0);
 410   2        }
 411   1      }
 412          
 413          //**************************************************************************
 414          //= 函数原型:void Fangkuai_down()
 415          //= 功    能: 方块下降处理
 416          //= 参    数:                   
 417          //= 返 回 值:
 418          //= 函数性质：公有函数
 419          //= 注    意：
 420          //***************************************************************************   
 421          static uint DSpeed=MIN_SLOW_SPEED;                 //标识下降速度
 422          static uint Now_Speed=MIN_SLOW_SPEED;         //当前速度
 423          void Fangkuai_down()
 424          { 
 425   1        uchar i;
 426   1        static bit New_shape=1;                //标识是否要产生新形状
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 8   

 427   1        if(Game_Stop==1) return;
 428   1        if(New_shape==1)
 429   1        {
 430   2          New_shape=0;
 431   2          xx=X_START;
 432   2              yy=Y_START;
 433   2          This_shape=Next_shape;                          //当前方块等于预方块
 434   2              Show_shape(15,18,Next_shape,0);     // 产生一下个方块前，将预方块删除
 435   2              Next_shape=Random();                    //产生下一个方块
 436   2              Show_shape(xx,yy,This_shape,1);          //显示当前方块
 437   2              Show_shape(15,18,Next_shape,1);          //预显示下一个方块
 438   2              if(Bottom_Anti())
 439   2              {
 440   3                 Game_Stop=1;
 441   3             Show_Image(35,15,94,114,0);        //清屏
 442   3                 char_wr(6,6,Game_Char,0,4); //显示Game 
 443   3                 char_wr(6,8,Over_Char,0,4); //显示over
 444   3                 return;
 445   3              } 
 446   2        }
 447   1        else
 448   1        {
 449   2            if(DSpeed==0)
 450   2                  {
 451   3                     DSpeed=Now_Speed;        //确定方块下落的速度
 452   3                     if(Bottom_Anti())
 453   3                       {
 454   4                           New_shape=1;//产生新的形状
 455   4                          for(i=0;i<4;i++)
 456   4                           {
 457   5                             Platform[xx+shape[This_shape].point[i].x][yy+shape[This_shape].point[i].y]=1;//写入平台
 458   5                                
 459   5                               }
 460   4                                       UnDisplay_line();//消行计分
 461   4                                       return;
 462   4                    }
 463   3                     else
 464   3                       {
 465   4                         Show_shape(xx,yy,This_shape,0); //删除当前形状
 466   4                         yy++;
 467   4                     Show_shape(xx,yy,This_shape,1); //显示形状(形状下移一个位置)
 468   4                         return;
 469   4                        }
 470   3              }
 471   2            else
 472   2             {
 473   3                DSpeed--;
 474   3                    
 475   3              }
 476   2              
 477   2          }
 478   1      }
 479          
 480          //**************************************************************************
 481          //= 函数原型:void Fangkuai_Control()
 482          //= 功    能: 方块游戏控制
 483          //= 参    数:                   
 484          //= 返 回 值:
 485          //= 函数性质：公有函数
 486          //= 注    意：
 487          //*************************************************************************** 
 488          #define Move_Left    4
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 9   

 489          #define Move_Right       6
 490          #define Add_Speed    5
 491          #define Change_Shape 8
 492          #define Game_Star    7
 493          #define Game_Pause   9
 494          
 495          void Fangkuai_Control()
 496          {
 497   1              
 498   1               switch(Key)    //消息处理
 499   1               {
 500   2                   case  Move_Left: 
 501   2                             {
 502   3                                    Key=Nothing;  //信息已被处理，抛弃它
 503   3                            if(!Left_Anti())
 504   3                            {
 505   4                                   Show_shape(xx,yy,This_shape,0); //删除当前形状
 506   4                               xx--;
 507   4                                   Show_shape(xx,yy,This_shape,1); //显示移动后的形状
 508   4                            }
 509   3                                 }break;
 510   2                   case  Move_Right:
 511   2                            {
 512   3                                   Key=Nothing;  //信息已被处理，抛弃它
 513   3                           if(!Right_Anti())
 514   3                           {
 515   4                                  Show_shape(xx,yy,This_shape,0); //删除当前形状
 516   4                              xx++;
 517   4                                  Show_shape(xx,yy,This_shape,1); //显示移动后的形状
 518   4                           }
 519   3                                }break;
 520   2                   case  Add_Speed:
 521   2                             {
 522   3                                     Key=Nothing;               //信息已被处理，抛弃它
 523   3                                         if(Game_Stop==1)
 524   3                                              {
 525   4                                                 if(Game_Level==0)
 526   4                                                 {
 527   5                                                    Game_Level=9;
 528   5                                                        Show_num(13,11,9);     //显示等级水平
 529   5                                                        Game_Speed=MIN_SLOW_SPEED/(Game_Level+1);  //根据水平确定速度
 530   5                                                      }
 531   4                                                      else
 532   4                                                      {
 533   5                                                         Game_Level--;
 534   5                                                         Show_num(13,11,Game_Level);   //显示等级水平
 535   5                                                         Game_Speed=MIN_SLOW_SPEED/(Game_Level+1);  //根据水平确定速度
 536   5                                                      }
 537   4                                               }
 538   3                                              else
 539   3                                              {
 540   4                                            Now_Speed=1;                         //调整位置后，加速下降
 541   4                                            DSpeed=Now_Speed;
 542   4                                              }
 543   3                                 }break;
 544   2                   case  Change_Shape:
 545   2                              {
 546   3                                          Key=Nothing;           //信息已被处理，抛弃它
 547   3                                              if(Game_Stop==1)
 548   3                                              {
 549   4                                                 if(Game_Level==9)
 550   4                                                 {
C51 COMPILER V8.02   FANGKUAI                                                              11/26/2006 21:57:40 PAGE 10  

 551   5                                                    Game_Level=0;
 552   5                                                        Show_num(13,11,0);     //显示等级水平
 553   5                                                        Game_Speed=MIN_SLOW_SPEED/(Game_Level+1);  //根据水平确定速度
 554   5                                                      }
 555   4                                                      else
 556   4                                                      {
 557   5                                                         Game_Level++;
 558   5                                                         Show_num(13,11,Game_Level);   //显示等级水平
 559   5                                                         Game_Speed=MIN_SLOW_SPEED/(Game_Level+1);  //根据水平确定速度
 560   5                                                      }
 561   4                                               }
 562   3                                              else
 563   3                                              {
 564   4      
 565   4                                             if(!Change_Shape_Anti())
 566   4                                             {
 567   5                                                Show_shape(xx,yy,This_shape,0); //删除当前形状
 568   5                                            This_shape=shape[This_shape].next;
 569   5                                                Show_shape(xx,yy,This_shape,1); //显示变化后的形状
 570   5                                              }
 571   4                                              }
 572   3                                  }break;
 573   2                      case  Game_Star:
 574   2                            {
 575   3                                   Key=Nothing;                 //信息已被处理，抛弃它
 576   3                                       ClrGraphic();
 577   3                                       Show_Image(35,15,94,114,0);
 578   3                                   Init_GamePlatform();
 579   3                                       Game_Stop=0;
 580   3                                }break;
 581   2                      case  Game_Pause:
 582   2                            {
 583   3                                   Key=Nothing;                 //信息已被处理，抛弃它
 584   3                                   Game_Stop=!Game_Stop;
 585   3                                }
 586   2                      default:Now_Speed=Game_Speed;
 587   2                }
 588   1      }
 589          
 590          
 591          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3148    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =    465    ----
   PDATA SIZE       =     15      18
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
